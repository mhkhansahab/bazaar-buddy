// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Seller {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  storeName String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  orders   Order[]

  @@map("sellers")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  category    String
  images      String // JSON string of image URLs
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sellerId String
  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id        String   @id @default(cuid())
  status    String   @default("pending") // pending, confirmed, shipped, delivered, cancelled
  total     Float
  customerEmail String
  customerName  String
  customerPhone String?
  shippingAddress String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerId String
  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  orderId   String
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
} 